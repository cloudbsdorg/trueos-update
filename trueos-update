#!/bin/sh
# Copyright 2018 - Kris Moore
# Script to help do pkg base upgrades and handle boot-environments
############################################################################

# Set default number of BE's to keep
: ${TRUEOS_UPDATE_MAXBE:="5"}

# Exit with a error message
exit_err() {
        if [ -n "${LOGFILE}" ] ; then
           echo "ERROR: $*" >> ${LOGFILE}
        fi
        echo >&2 "ERROR: $*"
        exit 1
}

# Run-command, halt if command exits with non-0
rc_halt()
{
  CMD="$@"

  if [ -z "${CMD}" ] ; then
    exit_err "Error: missing argument in rc_halt()"
  fi

  ${CMD}
  STATUS=$?
  if [ ${STATUS} -ne 0 ] ; then
    exit_err "Error ${STATUS}: ${CMD}"
  fi
}

rc_nohalt()
{
  CMD="$@"

  if [ -z "${CMD}" ] ; then
    exit_err "Error: missing argument in rc_halt()"
  fi

  ${CMD}
  STATUS=$?
}

run_cmd_wtee()
{
  ((((${1} 2>&1 ; echo $? >&3 ) | tee -a ${2} >&4 ) 3>&1) | (read xs; exit $xs)) 4>&1
  return $?
}

# Set the program location
PROGDIR="/var/trueos-update" ; export PROGDIR

# Set the pub openssl key
SKEY="${PROGDIR}/conf/security.key" ; export SKEY

# Start by sourcing /etc/profile
# This grabs any HTTP_ / FTP_ PROXY variables
. /etc/profile

# Fix some issues with pkg trying to go non-interactive
ASSUME_ALWAYS_YES="YES"
export ASSUME_ALWAYS_YES

# Get the system version we are checking for updates to
SYSVER="`uname -r | cut -d '-' -f 1-2`" ; export SYSVER

# Set the system arch type
ARCH=`uname -m`

# Set location of package cache
PKGDLCACHE="/var/cache/trueos-upgrade"

# Set location for our state files
STATEDIR="/var/db/trueos-update"

# Location for custom scripts for upgrades
UPDATEDOTD="/usr/local/etc/pcupdate.d"

# Trigger File for Tray Application
TRIGGERFILE="/tmp/.sysupdatetraytrigger"

# PKG_CMD to use
PKG_CMD="/usr/sbin/pkg-static"

# Make sure we don't keep these from system environment
unset INJAIL PKG_FLAG

# The default log file for output messages
LOGOUT="/var/log/trueos-update.log"

# Return codes
PKGUPDATERTN=100
UPDATEOTHERRTN=125

# Pkg does stuff now with ABIs and it prevents updating the database
export IGNORE_OSVERSION="YES"

######################################################################
# Done with config values
######################################################################

# Run-command, halt if command exits with non-0
rc_halt_cleanup()
{
  CMD="$@"

  if [ -z "${CMD}" ] ; then
    exit_err "Error: missing argument in rc_halt_cleanup()"
  fi
  echo "Running: $CMD" >> ${LOGOUT}

  ${CMD}
  STATUS=$?
  if [ ${STATUS} -ne 0 ] ; then
    sync ; sleep 2
    # Cleanup the boot-environment
    umount -f $STAGEMNT/dev 2>/dev/null >/dev/null
    umount -f $STAGEMNT 2>/dev/null >/dev/null
    beadm destroy -F $STAGEBE
    echo "Error ${STATUS}: ${CMD}" >> ${LOGOUT}
    exit_err "Error ${STATUS}: ${CMD}"
  fi
}

show_usage() {
        echo "trueos-update: Usage
----
  check		              - Check for updates
  upgrade [-f <upgrade file>] - Download updates, reboot and upgrade.
			        When -f <file> is specified, use a local
			        tarball containing packages for upgrade.
"
	exit 1
}

echo_log()
{
   echo "$@"
   echo "$@" >> ${LOGOUT}
}

is_net_up() {
  ping -c 1 www.trueos.org >/dev/null 2>/dev/null
  ret=$?
  if [ $ret -eq 0 ]; then
    return 0
  fi
  if [ -e "/usr/local/bin/pc-systemflag" ]; then
    pc-systemflag NETRESTART ERROR #set the system flag that no internet available
  fi
  return $ret
}


checkup_pkgs() {

  # Update the repo DB
  if [ "`id -u`" = "0" ] ; then
    mk_pkg_conf
    echo "Updating the pkg database..."
    ${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} update -f >/tmp/.updateOut.$$ 2>&1
    if [ $? -ne 0 ] ; then
      grep -q "Newer OS version" /tmp/.updateOut.$$
      if [ $? -eq 0 ] ; then
        rm /tmp/.updateOut.$$
        updates_are_available
	return $?
      fi
    fi
    rm /tmp/.updateOut.$$
  fi

  ${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} upgrade -n >/tmp/.pkgData.$$

  # Check for updates now
  grep -q "Your packages are up to date" /tmp/.pkgData.$$
  if [ $? -eq 0 ] ; then
     echo "All packages are up to date!"
     if [ -e "/usr/local/bin/pc-systemflag" ]; then
       pc-systemflag PKGUPDATE SUCCESS #set the system flag that packages are up to date
     fi
     rm /tmp/.pkgData.$$
     return 0
  fi

  # Display the pkg update data
  cat /tmp/.pkgData.$$
  rm /tmp/.pkgData.$$

  # We have updates
  updates_are_available
  return $?
}

updates_are_available()
{
  echo "The following updates are available:"
  echo "------------------------------------"
  echo "NAME: System package updates"
  echo "TYPE: PKGUPDATE"
  echo " "
  echo "To install: \"trueos-update upgrade\""
  if [ -e "/usr/local/bin/pc-systemflag" ]; then
    pc-systemflag PKGUPDATE UPDATE #set the system flag that updates available
  fi
  return $PKGUPDATERTN
}

set_update_vars()
{
  unset EVENT_PIPE

  # Set some locations
  STAGEBE="updaterstage"
  STAGEMNT="/.updateStage"
  OLDPKGLIST="${STATEDIR}/.pkgUpdateList"
  NEWPKGLIST="${STATEDIR}/.newPkgList"
  PKGUPGRADELOG="${STATEDIR}/.pkgUpdateLog"
  DLREV="${STATEDIR}/.dlrevision"
  touch ${PKGUPGRADELOG}
  if [ -e "${STATEDIR}/.newfreebsdver" ] ; then
    NEWFREEBSDVERSION=$(cat ${STATEDIR}/.newfreebsdver)
  fi
  if [ -e "${STATEDIR}/.fullupdate" ] ; then
    FULLUPDATE=$(cat ${STATEDIR}/.fullupdate)
  fi
  if [ -e "${STATEDIR}/.doPkgUpdates" ] ; then
    doPkgUpdates=$(cat ${STATEDIR}/.doPkgUpdates)
  fi
}

# Check that beadm exists before doing an update
check_valid_uptarget()
{
  /usr/bin/which -s beadm
  if [ $? -ne 0 ] ; then
     exit_err "No beadm installed! Is this a jail or non TrueOS box?"
  fi
}

do_update()
{
  check_valid_uptarget

  touch_updateinprogress
  doPkgUpdates="YES"

  set_update_vars

  run_update_pre
  mk_pkg_conf

  # If we have a stand-alone update, lets do it, otherwise download
  if [ -n "$TRUEOS_PKG_TARBALL" ] ; then
    extract_update_tarball
  else
    dl_pkgs
  fi

  doPkgUpdates="YES"

  # Setup our new BE
  mk_stage_be
  mount_stage_be
  prep_pkgs_chroot
  prep_rc_script_install
  umount_stage_be
  mk_stage_be_default

  # Lets reboot and do the 2nd stage work
  reboot
}

mk_pkg_conf()
{
  PKG_FLAG=""
  PKG_CFLAG=""

  if [ ! -d "$PKGDLCACHE" ] ; then
    mkdir -p $PKGDLCACHE
  fi

  # Set the cache directory
  PKG_CFLAG="-C /var/db/trueos-update/.pkgUpdate.conf"
  if [ ! -d "/var/db/trueos-update" ] ; then
    mkdir -p "/var/db/trueos-update"
  fi
  echo "PKG_CACHEDIR: $PKGDLCACHE" > /var/db/trueos-update/.pkgUpdate.conf
  echo "PKG_DBDIR: /var/db/trueos-update/pkgdb" >> /var/db/trueos-update/.pkgUpdate.conf
  echo "IGNORE_OSVERSION: YES" >> /var/db/trueos-update/.pkgUpdate.conf


  REALPKGDLCACHE=$(${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} config PKG_CACHEDIR)

  # Set the location for saving program state
  # If we are starting an upgrade, we need to "prime" the new PKG_DBDIR
  # This is done so if the user decides to use 'pkg' after an update is staged, we don't
  # invalidate all our package repo data
  rm -rf /var/db/trueos-update/pkgdb
  cp -r /var/db/pkg /var/db/trueos-update/pkgdb
  if [ $? -ne 0 ] ; then
    echo_log "Failed copying PKG DB..."
    exit 1
  fi
}

build_pkg_list()
{
  # Check if any packages are locked and bail if so
  pkg-static lock --has-locked-packages >/dev/null 2>/dev/null
  if [ $? -eq 0 ] ; then
    lockedList=$(pkg-static lock --show-locked -q | grep -v "trueos-")
    if [ -n "$lockedList" ] ; then
      if [ -e "/usr/local/bin/pc-systemflag" ] ; then
        pc-systemflag PKGUPDATE ERROR
      fi
      exit_err "You have LOCKED packages in your repo! These must be unlocked, or you can run pkg upgrade manually."
    fi
  fi

  # Build top-level list of pkgs installed
  ${PKG_CMD} query -e '%a = 0' '%o %n-%v' | grep -v '^base ' | sort > $OLDPKGLIST
  ${PKG_CMD} query -e '%a = 0' '%o' | grep -v '^base$' | sort > /var/db/trueos-update/.previous-user-pkgs.new

  echo "The following user-added packages will be installed / upgraded:" > ${PKGUPGRADELOG}
  echo "-----------------------------------------------" >> $PKGUPGRADELOG
  cat $OLDPKGLIST >> $PKGUPGRADELOG
  echo "-----------------------------------------------" >> $PKGUPGRADELOG

  # Lets show the user what packages are expected to be installed
  echo "The following user-added packages will be installed / upgraded:"
  echo "-----------------------------------------------"
  cat /var/db/trueos-update/.previous-user-pkgs.new
  echo "-----------------------------------------------"
  echo "Upgrade starting in 5 seconds!"
  echo "-----------------------------------------------"
  read -p "Press ENTER to abort upgrade" -t 5 BREAKOUT
  if [ $? -eq 0 ] ; then
	  exit_err "User aborted upgrade!"
  fi
  echo ""
}

###
# Helper to run pkg fetch commands in a loop since timeouts may not be fatal if we try again
###
pkg_fetch_verify() {

  local fetchPkg="$1"
  local fetchPkgFile="$2"
  local fetchRetries="$3"

  if [ -z "$fetchRetries" ] ; then
    fetchRetries="0"
    echo_log "Verifying / fetching packages for $fetchPkg - $fetchPkgFile"
    echo "Verifying / fetching packages for $fetchPkg - $fetchPkgFile" >> ${PKGUPGRADELOG}
  fi

  if [ $fetchRetries -gt 3 ] ; then
     # Exeeded the number of retry attempts
     # Time to fail out
     echo_log "Failed fetching: $fetchPkg - $fetchPkgFile" >> ${PKGUPGRADELOG}
     exit_err "Failed fetching: $fetchPkg - $fetchPkgFile"
  fi

  # Increment number of retry attempts
  fetchRetries=$(expr $fetchRetries + 1)

  # Attempt to fetch the package
  run_cmd_wtee "${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} fetch -U -d -y $fetchPkg" "${PKGUPGRADELOG}"
  _err=$?
  tail -n 1 ${PKGUPGRADELOG} | grep -q -e "failed checksum" -e "timed out"
  if [ $_err -ne 0 -o $? -eq 0 ]; then
    echo "Failed Package: Retrying download"
    pkg_fetch_verify "$fetchPkg" "$fetchPkgFile" "$fetchRetries"
  fi

  # PKGNG lies, we need to verify if the package was really downloaded
  if [ ! -e "${REALPKGDLCACHE}/${fetchPkgFile}" ] ; then
     # Check if the files ended up in a /All subdir
     if [ -e "${REALPKGDLCACHE}/All/${fetchPkgFile}" ] ; then
        REALPKGDLCACHE="${REALPKGDLCACHE}/All"
     else
        echo "Missing Package: ${REALPKGDLCACHE}/$fetchPkgFile"
        pkg_fetch_verify "$fetchPkg" "$fetchPkgFile" "$fetchRetries"
     fi
  fi
}

dl_pkgs()
{
  unset OBSOLETE_PACKAGES

  build_pkg_list

  # Setup the removedpkglist
  if [ -e "${STATEDIR}/.removed-pkg-list" ] ; then
    rm ${STATEDIR}/.removed-pkg-list
  fi
  touch ${STATEDIR}/.removed-pkg-list

  # Update the DB first
  echo_log "Updating the package repo database..."
  ${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} update -f
  if [ $? -ne 0 ] ; then
    exit_err "Failed upgrading package repo"
  fi
  sync
  sleep 2

  # Figure out the base package name, if its FreeBSD or $OTHER
  BASENAME=$(${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} rquery -U '%o %n-%v' | grep '^base ' | grep -e '-runtime-' | head -n 1 | awk '{print $2}' | cut -d '-' -f 1)
  echo "Using the following base package name: $BASENAME"

  # Clean pkgs
  SYSREV=$(${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} rquery -U '%v' ${BASENAME}-runtime | head -n 1)
  if [ -e "${DLREV}" -a "$(cat ${DLREV})" != "${SYSREV}" ] ; then
    echo_log "Cleaning stale pkg upgrade cache..."
    rm -rf ${PKGDLCACHE}
  fi
  echo "$SYSREV" > ${DLREV}

  if [ -e "$NEWPKGLIST" ] ; then rm $NEWPKGLIST; fi
  touch ${NEWPKGLIST}

  ###
  # Now start fetching all the update packages
  ###
  while read pkgLine
  do
    pkgOrigin="`echo $pkgLine | cut -d ' ' -f 1`"
    pkgName="`echo $pkgLine | cut -d ' ' -f 2`"

    # Check if this pkg exists in the new repo
    unset FETCHFILENAME
    echo_log "Determining package name for: ${pkgOrigin}"
    echo "Determining package name for ${pkgOrigin}" >> ${PKGUPGRADELOG}
    FETCHFILENAME="`${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} rquery -U '%n-%v' $pkgOrigin 2>/dev/null | head -n 1`"
    if [ -z "$FETCHFILENAME" ] ; then
       OBSOLETE_PACKAGES="${pkgOrigin} ${OBSOLETE_PACKAGES}"
       echo_log "*****"
       echo_log "No such package in new repo: $pkgOrigin"
       echo "*****" >> $PKGUPGRADELOG
       echo "No such package in new repo: $pkgOrigin" >> $PKGUPGRADELOG
       echo "$pkgOrigin" >> ${STATEDIR}/.removed-pkg-list
       echo "*****" >> $LOGOUT
       echo "*****" >> $PKGUPGRADELOG
       continue
    fi
    FETCHFILENAME="${FETCHFILENAME}.txz"

    # Download
    pkg_fetch_verify "$pkgOrigin" "$FETCHFILENAME"

    echo "$pkgOrigin $FETCHFILENAME" >> $NEWPKGLIST
  done < $OLDPKGLIST

  # Save State of REALPKGDLCACHE
  echo "${REALPKGDLCACHE}" > ${STATEDIR}/.realpkgdlcache

  # Doing a world upgrade, lets fetch packages
  echo_log "Verifying / fetching packages for ${BASENAME} Base"
  echo "Verifying / fetching packages for ${BASENAME} Base" >> ${PKGUPGRADELOG}
  attempts=0
  while :
  do
    attempts=$(expr $attempts + 1)
    run_cmd_wtee "${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} fetch -U -d -y -g ${BASENAME}-*" "${PKGUPGRADELOG}"
    _err=$?
    tail -n 1 ${PKGUPGRADELOG} | grep -q -e "failed checksum" -e "timed out" -e "not found" -e "No packages"
    if [ $_err -ne 0 -o $? -eq 0 ]; then
      if [ $attempts -gt 3 ] ; then
        echo_log "*****" ${PKGUPGRADELOG}
        echo_log "Failed fetching: ${BASENAME} Base" >> ${PKGUPGRADELOG}
        exit_err "Failed fetching: ${BASENAME} Base"
      fi
    else
      break
    fi
  done

  echo_log "-----------------------------------------------"
  echo "-----------------------------------------------" >> ${PKGUPGRADELOG}
}

prep_rc_script_install()
{
  # Clear the trigger file
  rm ${STAGEMNT}/var/.pc-attempt1 2>/dev/null

  # Now prep the RC script to do the rest of the upgrade after reboot
  rc_halt_cleanup "mv ${STAGEMNT}/etc/rc ${STAGEMNT}/etc/rc-orig"
  rc_halt_cleanup "mkdir -p ${STAGEMNT}/compat/linux/proc"
  rc_halt_cleanup "mkdir -p ${STAGEMNT}/compat/linux/sys"
  rc_halt_cleanup "mkdir -p ${STAGEMNT}/compat/linux/usr"
  rc_halt_cleanup "mkdir -p ${STAGEMNT}/compat/linux/dev"
  rc_halt_cleanup "mkdir -p ${STAGEMNT}/compat/linux/run"
  rc_halt_cleanup "cp ${PROGDIR}/rc-update ${STAGEMNT}/etc/rc"
  rc_halt_cleanup "cp ${PROGDIR}/rc-update ${STAGEMNT}/etc/rc-update"
  rc_halt_cleanup "cp ${PROGDIR}/rc-doupdate ${STAGEMNT}/etc/rc-doupdate"
}

check_low_space()
{
  if [ -z "${REALPKGDLCACHE}" ] ; then return; fi
  if [ ! -d "${REALPKGDLCACHE}" ] ; then return; fi

  local poolFree=$(get_root_pool_free_space)
  if [ -z "$poolFree" ] ; then return ; fi

  cd ${REALPKGDLCACHE}
  local pkgCacheSpace=`du -kc *.txz | tail -1 | awk '{print $1}'`
  if [ ! $(is_num "$pkgCacheSpace") ] ; then return ; fi

  # We try to over-estimate space required for decompression, since we don't want ZFS to get
  # too full, it gets cranky at over 75%
  pkgCacheSpace=`expr $pkgCacheSpace \* 3`

  if [ $poolFree -lt $pkgCacheSpace ] ; then
     do_prune_be "force"
     poolFree=$(get_root_pool_free_space)
     if [ $poolFree -lt $pkgCacheSpace ] ; then
        SPACE=`expr $pkgCacheSpace / 1024`
        exit_err "Low disk-space - update halted! Please free at least ${SPACE}MB before running again."
     fi
  fi
}

mk_stage_be()
{
  echo_log "Creating stage BE..."
  umount -f $STAGEMNT/dev 2>/dev/null >/dev/null
  umount -f $STAGEMNT 2>/dev/null >/dev/null

  # Auto-prune any old / stale BEs
  do_prune_be

  # Do the low-space check
  check_low_space

  # Check for an existing BE for upgrades
  beadm list -H | awk '{print $1}' | grep -q "$STAGEBE"
  if [ $? -eq 0 ] ; then
     beadm destroy -F $STAGEBE
  fi

  # Create the new stage boot environment
  rc_halt "beadm create $STAGEBE" >>${LOGOUT} 2>>${LOGOUT}
}

mount_stage_be()
{
  # Get the stage mount-point ready
  echo_log "Mounting the stage BE..."
  if [ ! -d "$STAGEMNT" ] ; then mkdir -p $STAGEMNT; fi
  umount -f $STAGEMNT/dev 2>/dev/null >/dev/null
  umount -f $STAGEMNT 2>/dev/null >/dev/null

  # Mount the BE
  rc_halt "beadm mount $STAGEBE $STAGEMNT"
  rc_halt_cleanup "mount -t devfs devfs ${STAGEMNT}/dev"

  # Save list of previous packages
  ${PKG_CMD} info >${STAGEMNT}/previous-pkg-list
}

prep_pkgs_chroot()
{
  # Now start our chroot commands

  # Need to export this before cleaning pkgs, some scripts may try to be interactive
  PACKAGE_BUILDING="YES"
  export PACKAGE_BUILDING

  PKG_CMD="${PTMPDIR}/usr/sbin/pkg-static"
  if [ ! -e "$PKG_CMD" ] ; then
    echo_log "Missing /usr/sbin/pkg-static binary!"
    exit 1
  fi

  # Figure out the base package name, if its FreeBSD or $OTHER
  BASENAME=$(${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} rquery '%o %n-%v' | grep '^base ' | grep -e '-runtime-' | head -n 1 | awk '{print $2}' | cut -d '-' -f 1)

  # Unlock all packages first
  echo_log "Unlocking packages..."
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} unlock -ay >>${LOGOUT} 2>>${LOGOUT}
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} set -a -v 0 >>${LOGOUT} 2>>${LOGOUT}

  # Check if we have -devel or -debug packages and re-install them
  DEVPKG="NO"
  DEBUGPKG="NO"
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} info -g ${BASENAME}-\* | grep -q -e '-development-'
  if [ $? -eq 0 ] ; then
    DEVPKG="YES"
  fi
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} info -g ${BASENAME}-\* | grep -q -e '-debug-'
  if [ $? -eq 0 ] ; then
    DEBUGPKG="YES"
  fi

  # Determine which packages are installed
  echo_log "Installing base packages..."
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} rquery -U -e '%o~base' '%n' > /tmp/.fpkg.$$

  echo_log "Deleting old packages..."

  # Since we cant remove pkgs via repository, this will have to do
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} query -e '%o !~ base' %o | \
	xargs ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} delete -fy >>${LOGOUT} 2>>${LOGOUT}
  if [ $? -ne 0 ] ; then
    echo_log "FAILED: Deleting old packages..."
    exit 1
  fi

  # Remove *ALL* the packages inside chroot, we need a clean slate to avoid pkg conflicts going sideways
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} delete -yg \* >>${LOGOUT} 2>>${LOGOUT}
  if [ $? -ne 0 ] ; then
    echo_log "FAILED Deleting old base packages from chroot"
    exit 1
  fi

  # Remove *ALL* packages but from alt root now using -a
  ${PKG_CMD} -r ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} delete -ya >>${LOGOUT} 2>>${LOGOUT}
  if [ $? -ne 0 ] ; then
      echo_log "WARNING: Failed deleting old base packages from alt-root"
  fi

  # Set any blacklist items
  if [ -e "/etc/trueos-base.json" ] ; then
    BLACKLISTPKG="$(jq -r '."blacklist" | join (" ")' /etc/trueos-base.json)"
  fi

  # Set the default ABI
  FBVER=$(${PKG_CMD} ${PKG_CFLAG} ${PKG_FLAG} rquery -U '%v' ${BASENAME}-runtime | cut -d '.' -f 1)
  NEWABI="FreeBSD:${FBVER}:`uname -m`"
  ABI_FLAG="-o ABI=$NEWABI"
  export ABI_FLAG
  echo_log "Setting new system ABI to: $NEWABI"

  # Start by installing runtime which is essential to boot-strapping others
  ${PKG_CMD} -r ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} install -U -yf ${BASENAME}-runtime >>${LOGOUT} 2>>${LOGOUT}
  if [ $? -ne 0 ] ; then
      exit_err "Failed boot-strapping ${BASENAME}-runtime"
  fi

  # Do it again now to get the pkg registered on the system
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} install -U -yf ${BASENAME}-runtime >>${LOGOUT} 2>>${LOGOUT}
  if [ $? -ne 0 ] ; then
      exit_err "Failed ${BASENAME}-runtime registration"
  fi

  # Install new base packages
  while read fpkg
  do
    SKIP=0
    echo "$fpkg" | grep -q -e '-development-'
    if [ $? -eq 0 -a "$DEVPKG" = "YES" ] ; then
      echo_log "Skipping DEVELOPMENT package: $fpkg"
      continue
    fi
    echo "$fpkg" | grep -q -e '-debug-'
    if [ $? -eq 0 -a "$DEBUGPKG" = "YES" ] ; then
      echo_log "Skipping DEBUG package: $fpkg"
      continue
    fi

    for i in $BLACKLISTPKG
    do
       echo $fpkg | grep -q -e "${BASENAME}-$i-"
       if [ $? -eq 0 ] ; then
	 SKIP=1
	 break
       fi
    done
    if [ $SKIP -eq 1 ] ; then
         echo_log "Skipping BLACKLIST package: $fpkg"
	 continue
    fi

    ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} info -q $fpkg
    if [ $? -eq 0 ] ; then
      echo_log "Skipping installed package: $fpkg"
      continue
    fi


    # Install the base system package now
    echo_log "Installing: $fpkg"
    ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} install -U -yf $fpkg >>${LOGOUT} 2>>${LOGOUT}
    if [ $? -ne 0 ] ; then
      echo_log "$(tail -n 50 ${LOGOUT})"
      echo_log "FAILED: Installing world base package: $fpkg"
      rm /tmp/.fpkg.$$
      exit 1
    fi
  done < /tmp/.fpkg.$$
  rm /tmp/.fpkg.$$

  # Set all base / essential pkgs as not auto-installed, so pkg autoremove doesn't touch them
  echo_log "Marking ${BASENAME} packages as not auto-installed"
  ${PKG_CMD} -c ${STAGEMNT} ${PKG_CFLAG} ${PKG_FLAG} ${ABI_FLAG} set -y -A 00 -a >>${LOGOUT} 2>>${LOGOUT}

  # Check if something went horribly wrong
  if [ ! -e "${STAGEMNT}/bin/sh" ] ; then
    echo_log "Missing ${STAGEMNT}/bin/sh: Something went horribly wrong!"
    exit 1
  fi

  # Workaround to issue in pkg base
  chown root:operator ${STAGEMNT}/sbin/shutdown
  chmod 4554 ${STAGEMNT}/sbin/shutdown

  # Copy the doPkgUp.sh template
  rc_halt "cp ${PROGDIR}/doPkgUp.sh ${STAGEMNT}/.doPkgUp.sh"

  # Set the dynamic variables
  sed -i '' "s|%%PKG_FLAG%%|${PKG_FLAG}|g" ${STAGEMNT}/.doPkgUp.sh
  sed -i '' "s|%%REALPKGDLCACHE%%|${REALPKGDLCACHE}|g" ${STAGEMNT}/.doPkgUp.sh
  sed -i '' "s|%%PKGFILENAME%%|${PKGFILENAME}|g" ${STAGEMNT}/.doPkgUp.sh
}

umount_stage_be()
{
  echo_log "Unmounting stage BE..."
  if [ ! -d "${STAGEMNT}/var/trueos-update" ] ; then
     mkdir -p "${STAGEMNT}/var/trueos-update"
  fi

  # Save the old BE name
  oldBE=`beadm list | grep ' / ' | awk '{print $1}'`
  echo "${oldBE}" > ${STAGEMNT}/var/.lastGoodBE

  echo_log "Copy upgrade.log to new BE..."
  rc_halt_cleanup "cp ${PKGUPGRADELOG} ${STAGEMNT}/var/trueos-update/upgrade.log"

  # Figure out the name of the new BE
  echo_log "Determine new BE name..."
  nDate=`date "+%Y%m%d_%H%M%S"`
  if [ -n "$NEWFREEBSDVERSION" ] ; then
    newBEName="${NEWFREEBSDVERSION}-up-${nDate}"
  else
    beVer="`chroot ${STAGEMNT} /bin/freebsd-version`"
    if [ -z "$beVer" ] ; then
      beVer="`uname -r`"
    fi
    newBEName="${beVer}-up-${nDate}"
  fi

  echo_log "Cleanup mounts..."

  # Now cleanup / unmount
  rc_halt "umount -f ${STAGEMNT}/dev"

  rc_halt "beadm umount -f ${STAGEBE}"
}

mk_stage_be_default()
{
  # Rename the BE
  rc_halt "beadm rename $STAGEBE $newBEName"
  # Rename the nickname
  rc_halt "beadm activate $newBEName"
}

touch_updateinprogress()
{
   if [ -e "/tmp/.updateInProgress" ] ; then
      pgrep -F /tmp/.updateInProgress >/dev/null 2>/dev/null
      if [ $? -eq 0 ] ; then
        exit_err "Another update is in progress!"
      fi
   fi
   echo "$$" > /tmp/.updateInProgress
}

require_root()
{
  if [ `id -u` != "0" ] ; then exit_err "Must be run as root!" ; fi
  if [ ! -d "$STATEDIR" ] ; then
    mkdir -p $STATEDIR 2>/dev/null
  fi
}

rotate_log()
{
  if [ -e "$LOGOUT" ] ; then
     cp ${LOGOUT} ${LOGOUT}.prev
  fi
  if [ `id -u` = "0" ] ; then
    echo "trueos-update: `date`" > $LOGOUT
  fi
}

run_update_pre()
{
  UPDATEDOTDPRE="${UPDATEDOTD}/pre"
  if [ ! -d "${UPDATEDOTDPRE}" ] ; then return 0; fi

  for pre in `ls ${UPDATEDOTDPRE}`
  do
    if [ "$pre" = "README" ] ; then continue ; fi

    echo "Running pre-update script: $pre"
    sh ${UPDATEDOTDPRE}/${pre} "$1"
    if [ $? -ne 0 ] ; then
       exit_err "Failed running pre-update script: $pre"
    fi
  done
}

run_update_post() {
  UPDATEDOTDPOST="${UPDATEDOTD}/post"
  if [ ! -d "${UPDATEDOTDPOST}" ] ; then return 0; fi

  for post in `ls ${UPDATEDOTDPOST}`
  do
    if [ "$post" = "README" ] ; then continue ; fi

    echo "Running post-update script: $post"
    sh ${UPDATEDOTDPOST}/${post} "$1"
    if [ $? -ne 0 ] ; then
       echo "WARNING: Failed running post-update script: $post"
    fi
  done
}

# Check if a value is a number
is_num()
{
  expr $1 + 1 2>/dev/null
  return $?
}

do_prune_be()
{
  # Check for number of BE's to keep
  local MAXBE
  MAXBE="$TRUEOS_UPDATE_MAXBE"

  # Shrink MAXBE by one, so that when we add a new one, it matches the real MAXBE
  MAXBE=`expr $MAXBE - 1`
  if [ $MAXBE -lt 1 ] ; then
    MAXBE=1
  fi

  # Check if we need to prune any BEs
  echo "Pruning old boot-environments..."
  bList="`mktemp /tmp/.belist.XXXXXX`"
  beadm list > $bList 2>$bList
  snapList=`cat $bList | grep -e "^beforeUpdate" -e "default" -e "-up-" | awk '{print $1}'`
  snapCount=`cat $bList | grep -e "^beforeUpdate" -e "default" -e "-up-" | awk '{print $1}' | wc -l | awk '{print $1}'`

  if [ -z "$snapCount" ] ; then return ; fi

  # Check if this is forced removal of an old BE
  if [ "$1" = "force" ] ; then
     # If we only have 3 BE's, return, don't want to prune less than that
     if [ $snapCount -lt 3 ] ; then
        return;
     fi
     MAXBE=`expr $snapCount - 1`
  fi

  # If we have less BE than MAX, return
  if [ $snapCount -lt $MAXBE ] ; then return ; fi

  # Reverse the list
  for tmp in $snapList
  do
     rSnaps="$tmp $rSnaps"
  done

  # Do any pruning
  KEEP="$MAXBE"
  num=0
  for snap in $rSnaps
  do
     num=`expr $num + 1`
     # Make sure this BE isn't mounted or running
     cat $bList | grep "^$snap " | grep -q -e " N " -e " NR "  -e " /"
     if [ $? -eq 0 ] ; then continue ; fi

     if [ $num -gt $KEEP ] ; then
        # Remove this old BE
        echo "Removing Boot Environment: $snap"
        beadm destroy -F $snap >/dev/null 2>/dev/null
     fi
  done

  rm $bList
}

get_root_pool_free_space()
{
  local ROOTPOOL=`mount | grep 'on / ' | cut -d '/' -f 1`
  if [ -z "$ROOTPOOL" ] ; then return ; fi
  local freeSpace=`zpool list -Hp ${ROOTPOOL} | awk '{print $4}'`
  if [ ! $(is_num "$freeSpace") ] ; then return ; fi
  # Convert freespace to Kb
  freeSpace=`expr $freeSpace / 1024 2>/dev/null`
  echo "$freeSpace"
}

if [ $# -eq 0 ] ; then
   show_usage
   exit 1
fi


while [ $# -gt 0 ] ; do

   case $1 in
	check) checkup_pkgs
	       exit $?
               break
               ;;
      upgrade) require_root
	       rotate_log
	       if [ -n "$2" ] ; then TRUEOS_PKG_TARBALL="$2" ; fi
	       do_update
	       exit 0
               break
               ;;
	*) show_usage ;;
   esac
   shift
done

exit 0
